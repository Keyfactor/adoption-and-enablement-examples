<File version="3.2">
  <FileID>3e2ae2fe-a12b-4113-b50b-49cef236bffc</FileID>
  <LastExport>133999385112403673</LastExport>
  <Preview>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
PxIDwMeDAaCYYwAgoj8SA8DHgwGgmCsYAMTGSUT0oUgHDAaAjwIDQDEnAkBS0ms8i42T3gSYnZ1N
RPQBqaV9T9iTSAaAYo4BoJgTASA1NQ237tyXXs1JRPShiYP/vfuPpX0QA0DxxQDwkRDJPCtLRUT0
hxA/BFRwP0TFCwPAR0LMXyKiP1LB/RAVLwwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQK
xABARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQAQERE
pEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRADABE
REQKxABARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQA
QEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRA
DABEREQKxABARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERE
CsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERERArEAEBE
RKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwA
RERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERERArE
AEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESk
QAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERE
RArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEB/SABQqVTQ6/VSCCAiIqL/eyIEfNAA
IEb+9u1bZGRkID09nYiIiP4DiOOzOEnPVqs+QADIyJAO/Dz4ExER/efJzMyEKisTyW8zP1wAICIi
ov88WZkZDABERERKwwBARESkQAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESk
QAwARERECsQAQEREpEAMAERERArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERE
RArEAEBERKRADABEREQKxABARESkQAwARERECsQAQEREpEAMAERERAr0QQKAKlMeMREREf1nUmdl
4HXq7xgAohOz8PptppQqiIiI6D9TSmomEl5nSsfufzsAWIg0QURERP/Z8h/8f5cAQERERMUPAwAR
EZEC/a8DwNy580OzjEBcmkkaiIiIiIqvlFzg6q2H/zoAjB4z5vrNu2E4f/mWlBiIiIio+BIH/+07
9/7rAMDCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC
wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLyAcv/D7yo+SLoaHBfAAAAAElFTkSuQmCC</Preview>
  <Form>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
AA==</Form>
  <Code><![CDATA[############# main Script##########################
function Invoke-main
{
	param (
		[Parameter()]
		[ValidateSet("Production", "NonProduction", "Lab")]
		[string]$envName,
		[Parameter()]
		[string]$role_name,
		[Parameter()]
		[string]$role_email,
		[Parameter()]
		[string]$Claim,
		[Parameter()]
		[ValidateSet("OAuthRole", "OAuthSubject")]
		[string]$Claim_Type,
		[Parameter()]
		[String]$Scheme,
		[Parameter()]
		[String]$secret
	)
	function GetEnvironmentSettings
	{
		param (
			$envName,
			$settings
		)
		$enviromentname = "Environment:$envName"
		return @{
			ROLE_DESCRIPTION = "$($settings.$enviromentname.RoleDesc.ToString())"
			CLAIM_DESCRIPTION = "$($settings.$enviromentname.ClaimDesc.ToString())"
			INCLUDE_EMAIL_IN_ROLE = $EmailAdd.Checked
			CLIENT_ID	     = "$($settings.$enviromentname.OAuth.ClientId.ToString())"
			CLIENT_SECRET    = "$($secret.ToString())"
			TOKEN_URL	     = "$($settings.$enviromentname.OAuth.TokenURL.ToString())"
			SCOPE		     = "$($settings.$enviromentname.OAuth.Scope.ToString())"
			AUDIENCE		 = "$($settings.$enviromentname.OAuth.Audience.ToString())"
			KEYFACTORAPI	 = "$($settings.$enviromentname.KFAPIURL.ToString())"
			ROLE_PERMISSIONS = GetAdditionalSettings($settings.$enviromentname.Permission)
			ADDITIONAL_COLLECTIONS = GetAdditionalSettings($settings.$enviromentname.collections)
			ADDITIONAL_ROLES = GetAdditionalSettings($settings.$enviromentname.roles)
			CLAIMVALUE	     = $Claim
		}
	}
	function GetAdditionalSettings
	{
		param ($additionalObjects)
		$additionalSettings = @{ }
		$additionalObjects.PSObject.Properties | ForEach-Object {
			$additionalSettings[$_.Name] = $_.Value.Trim("'")
		}
		return $additionalSettings
	}
	function load_variables
	{
		param (
			$envName
		)
		Add-Log -text "Loading Variables" -type Verbose
		switch ($envName)
		{
			'Production'     { $script:envVariables = GetEnvironmentSettings "Production" $settings }
			'NonProduction'  { $script:envVariables = GetEnvironmentSettings "NonProduction" $settings }
			'Lab'            { $script:envVariables = GetEnvironmentSettings "Lab" $settings }
		}
		return $envVariables
	}
	function Invoke-HttpGet
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$url,
			[Parameter(Mandatory = $true)]
			[string]$HeaderVersion,
			[Parameter(Mandatory = $false)]
			[hashtable]$Variables = $Variables
		)
		Try
		{
			Add-Log -text "calling $url with Get method" -type Debug
			$response = Invoke-WebRequest -Method Get -Uri $url -Headers (get-headers -HeaderVersion $HeaderVersion) -UseBasicParsing
			Add-Log -text "StatusCode: $($Response.StatusCode)" -type Debug
			return $response
		}
		Catch
		{
			Add-Log -text "Error in Invoke-HttpGet for URL=$url. Error: $($_.Exception.Message)" -type Error
		}
	}
	function Fetch_AllPages
	{
		param (
			[string]$Url,
			[string]$PageUrl,
			[hashtable]$Variables = $Variables,
			[string]$HeaderVersion
		)
		Add-log -text "Initiating paginated fetch from URL=$Url with PageUrl=$PageUrl" -type Verbose
		$TotalResults = @()
		$InitialResponse = Invoke-HttpGet -Url "$Url`1" -HeaderVersion $HeaderVersion
		$TotalCount = $InitialResponse.Headers["x-total-count"]
		if ($TotalCount -lt 50)
		{
			Add-log -text "Total count is less than page size limit. Returning initial response." -type Verbose
			return $InitialResponse
		}
		else
		{
			Add-log -text "Total pages to fetch: $TotalPages" -type Verbose
		}
		
		$TotalPages = [math]::Ceiling($TotalCount / 50)
		
		Add-log -text "Initiating paginated fetch from URL=$Url with PageUrl=$PageUrl" -type Verbose
		
		for ($CurrentPage = 1; $CurrentPage -le $TotalPages; $CurrentPage++)
		{
			Add-log -text "Fetching page $CurrentPage/$TotalPages from URL=$PageUrl" -type Verbose
			$FullUrl = "$PageUrl$CurrentPage"
			$Response = (Invoke-HttpGet -Url $FullUrl -HeaderVersion $HeaderVersion)
			$TotalResults += $Response.Content | ConvertFrom-Json
		}
		Add-log -text "Finished fetching all pages. Total results: $($TotalResults.Count)" -type Verbose
		return $TotalResults
	}
	function Invoke-HttpPost
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$url,
			[Parameter(Mandatory = $false)]
			[string]$HeaderVersion,
			$Variables = $Variables,
			[Parameter(Mandatory = $false)]
			$body
		)
		Add-Log -text "calling $url with Post method" -type Debug
		Add-Log -text "body: $($body)" -type Verbose
		$response = Invoke-WebRequest -Method Post -Uri $url -Headers (get-headers -HeaderVersion $HeaderVersion) -Body $body -UseBasicParsing
		Add-Log -text "StatusCode: $($Response.StatusCode)" -type Debug
		return $response
	}
	function Invoke-Http_Put
	{
		param (
			[string]$Url,
			[string]$HeaderVersion,
			$data,
			[hashtable]$Variables = $Variables
		)
		add-Log -text "calling $url with Put method" -type Debug
		Add-Log -text "body: $($NewClaim)" -type Verbose
		$response = Invoke-RestMethod -Uri $Url -Headers (get-headers -HeaderVersion $HeaderVersion) -Method Put -Body $data
		Add-Log -text "StatusCode: $($Response.StatusCode)" -type Debug
		return $response
	}
	function get-headers
	{
		param (
			$HeaderVersion = 1,
			[hashtable]$Variables = $Variables
		)
		$headers = @{
			'Content-Type' = 'application/x-www-form-urlencoded'
		}
		$body = @{
			'grant_type'    = 'client_credentials'
			'client_id'	    = $($Variables.client_id)
			'client_secret' = $($Variables.client_secret)
		}
		if ($variables.scope) { $body['scope'] = $variables.scope }
		if ($variables.audience) { $body['audience'] = $variables.audience }
		
		try
		{
			$access_token = (Invoke-RestMethod -Method Post -Uri $Variables.TOKEN_URL -Headers $headers -Body $body).access_token
			
			if ($access_token)
			{
				add-log -text "Sucessfully recieved Access Token" -type Debug
				add-log -text "Sucessfully recieved Access Token from $($Variables.TOKEN_URL)" -type Verbose
			}
		}
		catch
		{
			Add-Log -text "Error in create_auth: $($_.Exception.Message)" -type Error
		}
		return @{
			"content-type"			     = "application/json"
			"accept"					 = "text/plain"
			"x-keyfactor-requested-with" = "APIClient"
			"x-keyfactor-api-version"    = "$HeaderVersion.0"
			"Authorization"			     = "Bearer $access_token"
		}
	}
	function Check_KeyfactorStatus
	{
		param (
			[hashtable]$Variables = $Variables
		)
		$HeaderVersion = '1'
		
		$Url = "$($Variables.KeyfactorAPI)/status/healthcheck"
		$Response = Invoke-HttpGet -Url $Url -HeaderVersion $HeaderVersion
		if ($Response.StatusCode -eq 204)
		{
			return $true
		}
		else
		{
			return $false
		}
	}
	function process_roles
	{
		param
		(
			[hashtable]$Variables = $Variables,
			[string]$role_name = $null,
			$collection = $null,
			$role_email = $null
		)
		
		$sb = New-Object System.Text.StringBuilder
		[void]$sb.Append('Name -eq "')
		[void]$sb.Append($role_name)
		if ($EmailAdd.Checked -eq $true)
		{
			[void]$sb.Append(' (')
			[void]$sb.Append($role_email)
			[void]$sb.Append(')')
		}
		[void]$sb.Append('"')
		$query = $sb.ToString()
		
		$roleid = ((get_roles -Query $query) | ConvertFrom-Json).id
		
		if ($roleid)
		{
			Add-Log -text "role for $role_name exists with RoleId: $roleid." -type Info
		}
		else
		{
			Add-Log -text "role for $role_name does not exists, creating." -type Info
			$roleid = (New-Role -role_name $role_name -collection $collectionid -role_email $role_email).Id
			Add-Log -text "role for $role_name was created with RoleID: $roleid." -type Debug
		}
		return $roleid
	}
	function Get_Roles
	{
		[CmdletBinding()]
		param
		(
			[hashtable]$Variables = $Variables,
			$roleid = $null,
			$query = $null
		)
		
		if (-not ([string]::IsNullOrEmpty($roleid)))
		{
			$url = "$($Variables.KeyfactorAPI)/Security/Roles/$roleid"
			return Invoke-HttpGet -url $url -HeaderVersion 2
		}
		elseif (-not ([string]::IsNullOrEmpty($Query)))
		{
			Add-Type -AssemblyName System.Web
			$encodedString = [System.Uri]::EscapeDataString($Query)
			$url = "$($Variables.KeyfactorAPI)/Security/Roles?QueryString=$encodedString&ReturnLimit="
			$pageurl = "$($Variables.KeyfactorAPI)/Security/Roles?QueryString=$encodedString&PageReturned="
			return Fetch_AllPages -url $url -pageurl $pageurl -HeaderVersion 2
		}
	}
	function New-Role
	{
		[CmdletBinding()]
		param
		(
			[hashtable]$Variables = $Variables,
			[Parameter(Mandatory = $true)]
			$role_name,
			[Parameter(Mandatory = $false)]
			[INT]$collectionid = $null,
			[Parameter(Mandatory = $false)]
			$role_email = $null,
			[Parameter(Mandatory = $false)]
			$permissionset = $null
		)
		
		function Get-PermissionsetId
		{
			[CmdletBinding()]
			param (
				[hashtable]$Variables = $Variables
			)
			
			$url = "$($Variables.keyfactorapi)/permissionsets?ReturnLimit="
			$pageurl = "$($Variables.keyfactorapi)/permissionsets?PageReturned="
			return (Fetch_AllPages -url $url -pageurl $pageurl -HeaderVersion 1) | ConvertFrom-Json
		}
		
		$Collectionids = New-Object System.Collections.ArrayList
		$permissions = New-Object System.Collections.ArrayList
		foreach ($additional in $Variables.ADDITIONAL_COLLECTIONS.values)
		{
			$acollectionid = (Get_Collections -Name $additional).Id
			$Collectionids.Add($acollectionid) | Out-Null
		}
		$Collectionids.Add($collectionid) | Out-Null
		foreach ($permission in $Variables.ROLE_PERMISSIONS.Values)
		{
			if ($permission -match "Collection")
			{
				foreach ($id in $Collectionids)
				{
					$sb = New-Object System.Text.StringBuilder
					[void]$sb.Append($permission)
					[void]$sb.Append($id)
					[void]$sb.Append("/")
					$join = $sb.ToString()
					$permissions.Add($join) | Out-Null
				}
			}
			else
			{
				$permissions.Add($permission) | Out-Null
			}
		}
		
		if ([string]::IsNullOrEmpty($permissionset))
		{
			$psname = "global"
			$permissionset = Get-PermissionsetId
			$permissionset = $permissionset | Where-Object { $_.name -like "$psname" }
			$permissionset = $permissionset.id
		}
		
		$sb = New-Object System.Text.StringBuilder
		[void]$sb.Append($role_name)
		if ($Variables.Include_email_in_role)
		{
			[void]$sb.Append(' (')
			[void]$sb.Append($role_email)
			[void]$sb.Append(')')
		}
		$name = $sb.ToString()
		
		Add-Log -text "Creating role with Name: $name" -type Debug
		
		$Body = @{
			Name		    = $name
			Description	    = $variables.ROLE_DESCRIPTION
			EmailAddress    = $role_email
			PermissionSetId = $permissionset
			Permissions	    = $permissions
		}
		$url = "$($Variables.KeyfactorAPI)/security/roles"
		return (Invoke-HttpPost -url $url -HeaderVersion 2 -body ($body | ConvertTo-Json)).content | ConvertFrom-Json
	}
	function Get_Collections
	{
		[CmdletBinding()]
		param
		(
			[hashtable]$Variables = $Variables,
			[string]$Query = $null,
			[string]$Name = $null
		)
		
		if (-not ([string]::IsNullOrEmpty($Name)))
		{
			Add-Type -AssemblyName System.Web
			$encodedString = [System.Uri]::EscapeDataString($Name)
			$url = "$($Variables.KeyfactorAPI)/CertificateCollections/$encodedString"
			return (Invoke-HttpGet -url $url -HeaderVersion 1).content | ConvertFrom-Json
		}
		elseif (-not ([string]::IsNullOrEmpty($Query)))
		{
			Add-Type -AssemblyName System.Web
			$encodedString = [System.Uri]::EscapeDataString($Query)
			$url = "$($Variables.KeyfactorAPI)/CertificateCollections?QueryString=$encodedString&ReturnLimit="
			$pageurl = "$($Variables.KeyfactorAPI)/CertificateCollections?QueryString=$encodedString&PageReturned="
			return (Fetch_AllPages -url $url -pageurl $pageurl -HeaderVersion 1) | ConvertFrom-Json
		}
	}
	function process_claims
	{
		param
		(
			[hashtable]$Variables = $Variables,
			$claim = $null,
			$claimtype
		)
		
		$sb = New-Object System.Text.StringBuilder
		[void]$sb.Append('ClaimValue -eq "')
		[void]$sb.Append($claim)
		[void]$sb.Append('"')
		$query = $sb.ToString()
		
		$claimid = ((Get_Claims -Query $query).content | Convertfrom-Json).Id
		if ($claimid)
		{
			Add-Log -text "claim for $claim exists with ClaimID: $claimid" -type Info
		}
		else
		{
			Add-Log -text "claim for $claim does not exists, creating." -type Info
			$claimid = ((New-claim -claimvalue $claim -claimtype $claimtype).content | Convertfrom-Json).Id
			Add-Log -text "claim for $claim was created with ClaimID: $claimid." -type Debug
		}
		return $claimid
	}
	
	function Get_Claims
	{
		param (
			[hashtable]$Variables = $Variables,
			[string]$Query = $null,
			[INT]$Claimid = $null
		)
		if (-not ([string]::IsNullOrEmpty($Query)))
		{
			$EncodedString = [uri]::EscapeDataString($Query)
			$Url = "$($Variables.keyfactorapi)/Security/Claims?QueryString=$EncodedString&ReturnLimit="
			$PageUrl = "$($Variables.keyfactorapi)/Security/Claims?QueryString=$EncodedString&PageReturned="
			return Fetch_AllPages -Url $Url -PageUrl $PageUrl -HeaderVersion 1
		}
		elseif (-not ([string]::IsNullOrEmpty($ClaimId)))
		{
			$Url = "$($Variables.keyfactorapi)/Security/Claims/$ClaimId"
			return Invoke-HttpGet -Url $Url -HeaderVersion 1
		}
	}
	function New-Claim
	{
		param
		(
			[hashtable]$Variables = $Variables,
			[Parameter(Mandatory = $true)]
			[ValidateSet('OAuthRole', 'OAuthSubject')]
			[String]$claimtype,
			[Parameter(Mandatory = $true)]
			[String]$claimvalue
		)
		
		switch ($claimtype)
		{
			'OAuthRole' { $type = 4; Break }
			'OAuthSubject' { $type = 5; Break }
		}
		$sb = New-Object System.Text.StringBuilder
		[void]$sb.Append($Variables.CLAIM_DESCRIPTION)
		[void]$sb.Append($claimvalue)
		$description = $sb.ToString()
		
		
		$body = @{
			"ClaimType"				       = $type
			"ClaimValue"				   = $claimvalue
			"ProviderAuthenticationScheme" = $Scheme
			"Description"				   = $description
		}
		
		$url = "$($Variables.keyfactorapi)/security/claims"
		return Invoke-HttpPost -url $url -HeaderVersion 1 -body ($body | ConvertTo-JSON)
	}
	function Update-RoleClaim
	{
		param (
			[hashtable]$Variables = $Variables,
			[string]$RoleId,
			[string]$ClaimId
		)
		
		# Helper function: Build a claim object
		function Build-Claim
		{
			param (
				[hashtable]$Variables = $Variables,
				[string]$ClaimId
			)
			# Fetch claim data and convert from JSON
			$claimData = (Get_Claims -ClaimId $ClaimId).content | ConvertFrom-Json
			if (-not $claimData)
			{
				Add-Log -text "Claim with ID $ClaimId could not be retrieved." -type Error
			}
			
			# Map claim type
			switch ($claimData.ClaimType)
			{
				'user'        { $claimData.ClaimType = 0 }
				'group'       { $claimData.ClaimType = 1 }
				'computer'    { $claimData.ClaimType = 2 }
				'OAuthOid'    { $claimData.ClaimType = 3 }
				'OAuthRole'   { $claimData.ClaimType = 4 }
				'OAuthSubject'{ $claimData.ClaimType = 5 }
				'OAuthClientId'{ $claimData.ClaimType = 6 }
				default       { Add-Log -text "Unknown claim type: $($claimData.ClaimType)" -type Error }
			}
			
			# Return the constructed claim object
			return @{
				"ClaimType"				       = $claimData.ClaimType
				"ClaimValue"				   = $claimData.ClaimValue
				"ProviderAuthenticationScheme" = $claimData.Provider.AuthenticationScheme
				"Description"				   = $claimData.Description
			}
		}
		
		# Check if the RoleId is valid
		if ([string]::IsNullOrEmpty($RoleId))
		{
			Add-Log -text "RoleId cannot be null or empty." -type Error
		}
		
		# Fetch the role data
		$roleData = (Get_Roles -RoleId $RoleId).content | ConvertFrom-Json
		if (-not $roleData)
		{
			Add-Log -text "Role with ID $RoleId could not be retrieved." -type Error
		}
		
		# Check if the claim exists in the role
		if ($ClaimId -in $roleData.Claims.id)
		{
			Add-Log -text "Claim with ID $ClaimId already exists in Role $RoleId." -type Info
			return $roleData
		}
		else
		{
			Add-Log -text "Claim with ID $ClaimId does not exist in Role $RoleId, adding it." -type Debug
			
			# Loop through existing claims and add the new claim
			$newclaims = @()
			foreach ($claim in $roleData.Claims)
			{
				$newClaim = Build-Claim -Variables $Variables -ClaimId $Claim.Id
				$newclaims += $newClaim
			}
			$newClaim = Build-Claim -Variables $Variables -ClaimId $ClaimId
			$newclaims += $newClaim
			$roleData.Claims = @()
			Add-Member -InputObject $roleData -NotePropertyName "Claims" -NotePropertyValue @($newclaims) -Force
			
			# Prepare API call (uncomment when you need to actually send the request)
			$url = "$($Variables.KeyfactorAPI)/security/Roles"
			return Invoke-Http_Put -Url $url -HeaderVersion 2 -Data ($roleData | ConvertTo-Json -Depth 10)
		}
	}
	
	function process_additional_roles
	{
		param (
			[hashtable]$Variables = $Variables,
			$role,
			[string]$ClaimId
		)
		if ((-not [string]::IsNullOrEmpty($role)))
		{
			$sb = New-Object System.Text.StringBuilder
			[void]$sb.Append('name -eq "')
			[void]$sb.Append($role)
			[void]$sb.Append('"')
			$query = $sb.ToString()
			$roleid = ((get_roles -Query $query).content | Convertfrom-Json).Id
			$rolevalidation = Update-RoleClaim -RoleId $roleid -ClaimId $ClaimId			
			if ($rolevalidation)
			{
				Add-Log -text "added $claimid to role: $role" -type debug
			}
			else
			{
				Add-Log -text "ERROR Could not add $claimid to role: $role" -type Warning
			}
		}
	}
	#Main
	$Script:Variables = load_variables -envName $envName
	
	if ($Variables)
	{
		Add-Log -text "Sucessfully added Variables" -type Debug
		Add-Log -text "Connecting to Keyfactor Command..." -type Info
		if (Check_KeyfactorStatus)
		{
			Add-Log -text "Sucessfully connected to Keyfactor Command." -type Debug
			Add-Log -text "Checking if role name: $($role_name) exists" -type Info
			$roleid = process_roles -role_name $role_name -role_email $role_email
			Add-Log -text "Checking if claim: $($Claim) exists" -type Info
			$claimid = process_claims -claim $Claim -claimtype $Claim_Type
			Add-Log -text "Adding Claim to Role: $($role_name)" -type Info
			$roleupdate = Update-RoleClaim -RoleId $roleid -ClaimId $claimid
			foreach ($role in $Variables.ADDITIONAL_ROLES.values)
			{
				Add-Log -text "Adding Claim to additional Role: $($role)" -type Info
				process_additional_roles -ClaimId $claimid -role $role
			}
			Add-Log -text "Process Completed" -type Info
		}
		else
		{
			Add-log -text "Keyfactor Status is not good" -type Error
			return
		}
	}
	else
	{
		Add-Log -text "could not load variables" -type Error
		return
	}
}

############### Helper Functions ###################
function Add-Log
{
	param (
		[Parameter(Mandatory = $true)]
		[string]$text,
		[Parameter(Mandatory = $true)]
		[ValidateSet("Info", "Error", "Warning", "Debug", "Verbose")]
		$type = "Info"
	)	
	function WriteMessage
	{
		param (
			[Parameter(Mandatory = $true)]
			[string]$text,
			[Parameter(Mandatory = $true)]
			$color
		)
		$richTextBoxOutput.SelectionStart = $richTextBoxOutput.TextLength
		$richTextBoxOutput.SelectionColor = $color
		$richTextBoxOutput.AppendText("-$($text) `n")
		$richTextBoxOutput.SelectionColor = $richTextBoxOutput.ForeColor
	}
	
	function GetLogColor
	{
		param (
			[Parameter(Mandatory = $true)]
			[string]$type
		)
		switch ($type)
		{
			"Info" { return [System.Drawing.Color]::White }
			"Error" { return [System.Drawing.Color]::Red }
			"Warning" { return [System.Drawing.Color]::Yellow }
			"Debug" { return [System.Drawing.Color]::DeepPink }
			"Verbose" { return [System.Drawing.Color]::Cyan }
		}
	}
	
	if ($levellog -eq "Info")
	{
		switch ($type)
		{
			"Info" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Error" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Warning" { WriteMessage -text $text -color (GetLogColor -type $type) }
		}
	}
	elseif ($levellog -eq "Debug")
	{
		switch ($type)
		{
			"Info" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Error" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Warning" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Debug"  { WriteMessage -text $text -color (GetLogColor -type $type) }
		}
	}
	elseif ($levellog -eq "Verbose")
	{
		switch ($type)
		{
			"Info" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Error" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Warning" { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Debug"  { WriteMessage -text $text -color (GetLogColor -type $type) }
			"Verbose"  { WriteMessage -text $text -color (GetLogColor -type $type) }
		}
	}
	if ($type -eq "error")
	{
		return
	}
}

function get-secret
{
	param (
		$envName
	)
	# Create the form
	$form = New-Object System.Windows.Forms.Form
	$form.Text = "Enter Secret"
	$form.Size = '300,200'
	$form.StartPosition = "CenterScreen"
	$form.Icon = $(Get-Keyfactor-Icon)
	
	# Label
	$label = New-Object System.Windows.Forms.Label
	$label.Text = "Please Enter the secret for: $($envName)"
	$label.AutoSize = $true
	$label.Location = '10,20'
	$form.Controls.Add($label)
	
	# Password TextBox
	$textBox = New-Object System.Windows.Forms.TextBox
	$textBox.Location = '10,50'
	$textBox.Size = '260,20'
	$textBox.UseSystemPasswordChar = $true # Masks input
	$form.Controls.Add($textBox)
	
	# OK Button
	$okButton = New-Object System.Windows.Forms.Button
	$okButton.Text = "OK"
	$okButton.Location = '100,80'
	$okButton.Add_Click({
			$secret = $textBox.Text
			if ([string]::IsNullOrWhiteSpace($secret))
			{
				[System.Windows.Forms.MessageBox]::Show(
					"Secret cannot be empty.",
					"Input Error",
					[System.Windows.Forms.MessageBoxButtons]::OK,
					[System.Windows.Forms.MessageBoxIcon]::Error
				)
			}
			else
			{
				$form.Tag = $secret
				$form.Close()
			}
		})
	$form.Controls.Add($okButton)
	
	# Show dialog
	$form.ShowDialog() | Out-Null
	
	# Retrieve the secret
	return $form.Tag
}
function Get-Keyfactor-Icon
{
	#Load Keyfactor_Icon for GUI
	$keyfactor_logo_image = ""
	$IconBytes = [Convert]::FromBase64String($keyfactor_logo_image)
	$MemoryStream = New-Object System.IO.MemoryStream
	$MemoryStream.Write($IconBytes, 0, $IconBytes.Length)
	$MemoryStream.Seek(0, 0) | Out-Null
	$Icon = [System.Drawing.Icon]::new($MemoryStream)
	return $Icon
}

function create-ini
{
	$iniContent = @"
# This section is for the Lab environment settings
[Environment:Lab]
Schemes='example,example2'
ClaimDesc=this is a rxampleclaims desc
RoleDesc=this is a example role desc
KFAPIURL=https://example/KeyfactorAPI

# OAuth settings for the Lab environment
[Environment:Lab.OAuth]
ClientId=example-client-id-1234
TokenURL=https://example/token
Scope=exampleSCOPE
Audience=exampleaudience

# Permissions for the Lab environment
[Environment:Lab.Permission]
portal='/portal/read/'
revoke='/example/permission/'

# Collections for the Lab environment
[Environment:Lab.collections]#
1=examplecollection

# Roles for the Lab environment
[Environment:Lab.roles]
1=examplerole

# This section is for the NonProduction environment settings
[Environment:NonProduction]
Schemes='example,example2'
ClaimDesc=this is a rxampleclaims desc
RoleDesc=this is a example role desc
KFAPIURL=https://example/KeyfactorAPI

# OAuth settings for the NonProduction environment
[Environment:NonProduction.OAuth]
ClientId=example-client-id-1234
TokenURL=https://example/token
Scope=exampleSCOPE
Audience=exampleaudience

# Permissions for the NonProduction environment
[Environment:NonProduction.Permission]
portal='/portal/read/'
revoke='/example/permission/'

# Collections for the NonProduction environment
[Environment:NonProduction.collections]
1=examplecollection

# Roles for the NonProduction environment
[Environment:NonProduction.roles]
1=examplerole

# This section is for the Production environment settings
[Environment:Production]
Schemes='example,example2'
ClaimDesc=this is a rxampleclaims desc
RoleDesc=this is a example role desc
KFAPIURL=https://example/KeyfactorAPI

# OAuth settings for the Production environment
[Environment:Production.OAuth]
ClientId=example-client-id-1234
TokenURL=https://example/token
Scope=exampleSCOPE
Audience=exampleaudience

# Permissions for the Production environment
[Environment:Production.Permission]
portal='/portal/read/'
revoke='/example/permission/'

# Collections for the Production environment
[Environment:Production.collections]
1=examplecollection

# Roles for the Production environment
[Environment:Production.roles]
1=examplerole
"@
	return $iniContent
}

function load-applicationsettings
{
	param (
		[string]$Path
	)
	
	$iniContent = Get-Content -Path $Path
	$config = @{ }
	$currentPath = @()
	
	foreach ($line in $iniContent)
	{
		$line = $line.Trim()
		if ($line -match '^\[(.+)\]$')
		{
			$section = $matches[1]
			$currentPath = $section -split '\.'
			$ref = $config
			foreach ($part in $currentPath)
			{
				if (-not $ref.ContainsKey($part))
				{
					$ref[$part] = @{ }
				}
				$ref = $ref[$part]
			}
		}
		elseif ($line -match '^(.*?)=(.*)$')
		{
			$key = $matches[1].Trim()
			$value = $matches[2].Trim()
			$ref[$key] = $value
		}
	}
	
	return $config
}
###################### Form methods ##############################################
$Environment_SelectedIndexChanged = {
	if (-not $iniloadBrowsetext.Text)
	{
		Add-Log -text "Select INI File" -type Error
	}
	$script:settings = load-applicationsettings -path $inipathaccual

	$items = switch ($Environment.SelectedItem)
	{
		'Production'     { $settings."Environment:Production".Schemes.ToString() }
		'NonProduction'  { $settings."Environment:NonProduction".Schemes.ToString() }
		'Lab'            { $settings."Environment:Lab".Schemes.ToString() }
	}
	$items = $items.Trim("'").Split(',')
	$Scheme.Items.AddRange(@($items))
}

$TabControl_firstrun_change = {
	$inipath.Text = $inipathaccual
}

$buttonRun_Click = {
	$richTextBoxOutput.Clear()
	$script:settings = load-applicationsettings -path $inipathaccual
	if (-not $settings)
	{
		Add-Log -text "Could not load setting from ApplicationSettings.ini" -type Error
		return
	}
	
	# validation logic
	if (-not $RoleName.Text)
	{
		Add-Log -text "The Role Name can not be blank" -type Error
		return
	}
	if (-not $ClaimValue.Text)
	{
		Add-Log -text "The Claim Value can not be blank" -type Error
		return
	}
	if (-not $Scheme.SelectedItem)
	{
		Add-Log -text "A Scheme must be selected" -type Error
		return
	}
	if (-not $ClaimType.SelectedItem)
	{
		Add-Log -text "A Claim Type must be selected" -type Error
		return
	}
	if ($EmailAdd.Checked -and [string]::IsNullOrEmpty($Email.text))
	{
		Add-Log -text "If Email Checkbox is checked the Email can not be blank" -type Error
		return
	}
	
	# Email validation
	if (-not [string]::IsNullOrEmpty($Email.Text))
	{
		$EmailPattern = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
		if (-not [System.Text.RegularExpressions.Regex]::IsMatch($email.Text, $EmailPattern))
		{
			Add-Log -text "Email validation failure. Email must be in the format of 'name@domain.com'" -type Error
			return
		}
	}
	
	$secret = get-secret -envName $Environment.SelectedItem
	if (-not $secret)
	{
		return
	}
	
	$ClaimTypenew = switch ($ClaimType.SelectedItem)
	{
		"Group" { "OAuthRole" }
		"User" { "OAuthSubject" }
	}
	
	Invoke-main -envName $Environment.SelectedItem -role_name $RoleName.Text -role_email $Email.Text -Claim $ClaimValue.Text -Claim_Type $ClaimTypenew -Scheme $Scheme.SelectedItem -secret $secret
	
}

$Close1_Click={
	$result = [System.Windows.Forms.MessageBox]::Show(
		"Are you sure you want to exit?",
		"Confirm Exit",
		[System.Windows.Forms.MessageBoxButtons]::YesNo,
		[System.Windows.Forms.MessageBoxIcon]::Question
	)
	
	if ($result -eq [System.Windows.Forms.DialogResult]::Yes)
	{
		$formMain.Close()
	}
}

$loglevel_SelectedIndexChanged = {
	$Script:levellog = $loglevel.SelectedItem
}

$loadbutton_Click = {
	$OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
	$OpenFileDialog.InitialDirectory = [Environment]::GetFolderPath("MyDocuments")
	$OpenFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
	$OpenFileDialog.Multiselect = $false
	
	if ($OpenFileDialog.ShowDialog() -eq "OK")
	{
		$SelectedFile = $OpenFileDialog.FileName
		$LoadPath.Text = $SelectedFile
	}
}

$createcsvbutton_Click = {
	$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
	$saveFileDialog.Title = "Saved file Location"
	$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
	$saveFileDialog.DefaultExt = "csv"
	$saveFileDialog.FileName = "claims.csv"
	$saveFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	
	if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
	{
		try
		{
			$SelectedFile = $saveFileDialog.FileName
			$CreatePath.Text = $SelectedFile
			$filePath = $saveFileDialog.FileName
			$headers = "claim_type,claim_scheme,role_name,associated_email,claim_value,add_email"
			Set-Content -Path $filePath -Value $headers
			[System.Windows.Forms.MessageBox]::Show("CSV file created successfully at:`n$SelectedFile", "Success", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Failed to create CSV file.`nError: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
		}
	}
	else
	{
		Write-Host "Save operation was canceled."
	}
}

$buttonCreateIni_Click = {
	$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
	$saveFileDialog.Title = "Saved file Location"
	$saveFileDialog.Filter = "INI files (*.ini)|*.ini|All files (*.*)|*.*"
	$saveFileDialog.DefaultExt = "ini"
	$saveFileDialog.FileName = "applicationsettings.ini"
	$saveFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
	{
		try
		{
			$SelectedFile = $saveFileDialog.FileName
			$CreatePath.Text = $SelectedFile
			$filePath = $saveFileDialog.FileName
			$content = create-ini
			Set-Content -Path $filePath -Value $content
			[System.Windows.Forms.MessageBox]::Show("ini file created successfully at:`n$SelectedFile", "Success", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Failed to create ini file.`nError: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
		}
	}
	else
	{
		Write-Host "Save operation was canceled."
	}
}

$BatchbuttonClose_Click = {
	$result = [System.Windows.Forms.MessageBox]::Show(
		"Are you sure you want to exit?",
		"Confirm Exit",
		[System.Windows.Forms.MessageBoxButtons]::YesNo,
		[System.Windows.Forms.MessageBoxIcon]::Question
	)
	
	if ($result -eq [System.Windows.Forms.DialogResult]::Yes)
	{
		$formMain.Close()
	}
}

$RunBatchButton_Click = {
	$levellog = "Info"
	$richTextBoxOutput.Clear()
	$script:settings = load-applicationsettings -path $inipathaccual
	if (-not $settings)
	{
		Add-Log -text "Could not load setting from ApplicationSettings.ini" -type Error
		return
	}
	$secret = get-secret -envName $Batchenvironment.SelectedItem
	if (-not $secret)
	{
		return
	}
	$TabControl.SelectedTab = $NewClaim
	$csv = Import-Csv -Path $LoadPath.Text
	
	# Add a line number to each row
	$lineNumber = 2
	$csv | ForEach-Object {
		$_ | Add-Member -NotePropertyName "LineNumber" -NotePropertyValue $lineNumber
		$lineNumber++
	}
	
	foreach ($line in $csv)
	{
		Add-Log -text "Validating row $($line.LineNumber) " -type Info
		# validation logic
		if (-not $line.role_name)
		{
			Add-Log -text "The Role_Name can not be empty on row: $($line.LineNumber)" -type Error
			continue
		}
		if (-not $line.claim_value)
		{
			Add-Log -text "The Claim_Value can not be empty on row: $($line.LineNumber)" -type Error
			continue
		}
		if (-not $line.claim_scheme)
		{
			Add-Log -text "A Claim_Scheme can not be empty on row: $($line.LineNumber)" -type Error
			continue
		}
		if (-not $line.claim_type)
		{
			Add-Log -text "A Claim_Type can not be empty on row: $($line.LineNumber)" -type Error
			continue
		}
		if ($line.add_email -and [string]::IsNullOrEmpty($line.associated_email))
		{
			Add-Log -text "If add_Email is true the associated_email can not be blank on row: $($line.LineNumber)" -type Error
			continue
		}
		
		# Email validation
		if (-not [string]::IsNullOrEmpty($line.associated_email))
		{
			$EmailPattern = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
			if (-not [System.Text.RegularExpressions.Regex]::IsMatch($line.associated_email, $EmailPattern))
			{
				Add-Log -text "Email validation failure. Email must be in the format of 'name@domain.com' on row: $($line.LineNumber)" -type Error
				continue
			}
		}
		Add-Log -text "Validation of row $($line.LineNumber) was sucessfull" -type Info
		$ClaimTypenew = switch ($line.claim_type)
		{
			"Group" { "OAuthRole" }
			"User" { "OAuthSubject" }
		}
		
		Invoke-main -envName $Batchenvironment.SelectedItem -role_name $line.role_name -role_email $line.associated_email -Claim $line.claim_value -Claim_Type $ClaimTypenew -Scheme $line.claim_scheme -secret $secret
		
	}
}

$linklabelKeyfactorOnboarding_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	Start-Process "https://github.com/Keyfactor/adoption-and-enablement-examples/tree/main/OnBoarding"
}

# Assign the event handler
$loglevel.Add_SelectedIndexChanged($loglevel_SelectedIndexChanged)
$TabControl.add_SelectedIndexChanged($TabControl_firstrun_change)

############################ Form Load #########################################
$formmain_Load = {
	$levellog = "Info"
	$inidir = [System.IO.Path]::GetDirectoryName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	$script:inipathaccual = "$($inidir)" + '/applicationsettings.ini'
	if (!(Test-Path $inipathaccual))
	{
		Add-Log -text "could not load applicationsettings.ini file from $inipathaccual" -type Warning
	}
	
	$formmain.Icon = (Get-Keyfactor-Icon)
	
	
}


]]></Code>
  <TV>0</TV>
  <Bookmarks>
    <Line>899</Line>
  </Bookmarks>
  <BreakPoints />
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>